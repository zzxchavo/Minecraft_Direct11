Texture2D shaderTexture:register(t0);
SamplerState SampleType:register(s0);

cbuffer renderFactors : register(b0)
{
    float Transparent;
    float3 rev;
};

cbuffer skyColor : register(b1)
{
	float4 skycolor;
};
struct PSInputType
{
	float4 position:SV_POSITION;
	float2 tex:TEXCOORD0;
	float2 tex1:TEXCOORD1;
	float2 tex2:TEXCOORD2;
	float2 tex3:TEXCOORD3;
	float2 tex4:TEXCOORD4;
	float2 tex5:TEXCOORD5;
	float2 tex6:TEXCOORD6;
	float2 tex7:TEXCOORD7;
	float2 tex8:TEXCOORD8;
	float2 tex9:TEXCOORD9;
	float2 tex10:TEXCOORD10;
	float2 tex11:TEXCOORD11;
	float2 tex12:TEXCOORD12;
	float2 tex13:TEXCOORD13;
	float2 tex14:TEXCOORD14;	
	float2 tex15:TEXCOORD15;
};

float4 PSEntry(PSInputType input) : SV_Target
{
  	float weight0 = 1.0f, weight1 = 0.99f, weight2 = 0.88f, weight3 = 0.69f, weight4 = 0.55f,weight5 = 0.30,weight6 = 0.18,weight7 = 0.1;
  	float normalization;
  	float4 color = float4(0.0f,0.0f,0.0f,0.0f);
	normalization = (weight0 + 2.0f * (weight1 + weight2 + weight3 + weight4 + weight5 + weight6 + weight7));
	weight0 = weight0 / normalization;
	weight1 = weight1 / normalization;
	weight2 = weight2 / normalization;
	weight3 = weight3 / normalization;
	weight4 = weight4 / normalization;
	weight5 = weight5 / normalization;
	weight6 = weight6 / normalization;
	weight7 = weight7 / normalization;
	color += shaderTexture.Sample(SampleType, input.tex1) * weight7;
	color += shaderTexture.Sample(SampleType, input.tex2) * weight6;
	color += shaderTexture.Sample(SampleType, input.tex3) * weight5;
	color += shaderTexture.Sample(SampleType, input.tex4) * weight4;
	color += shaderTexture.Sample(SampleType, input.tex5) * weight3;
	color += shaderTexture.Sample(SampleType, input.tex6) * weight2;
	color += shaderTexture.Sample(SampleType, input.tex7) * weight1;
	color += shaderTexture.Sample(SampleType, input.tex8) * weight0;
	color += shaderTexture.Sample(SampleType, input.tex9) * weight1;
	color += shaderTexture.Sample(SampleType, input.tex10) * weight2;
	color += shaderTexture.Sample(SampleType, input.tex11) * weight3;
	color += shaderTexture.Sample(SampleType, input.tex12) * weight4;
	color += shaderTexture.Sample(SampleType, input.tex13) * weight5;
	color += shaderTexture.Sample(SampleType, input.tex14) * weight6;
	color += shaderTexture.Sample(SampleType, input.tex15) * weight7;
	color.a = 1.0f;
	color = saturate(color);
	return color;
}